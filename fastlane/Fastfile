# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.105.0"

import "#{ENV['PWD']}/Vendor/WL/Conf/fastlane/fastlane.rb"

AWLOutputDir = "#{ENV['PWD']}/Build"

def cleanOutputDir
   if File.directory?(AWLOutputDir)
      puts("â†’ Deleting directory #{AWLOutputDir}")
      FileUtils.rm_r(AWLOutputDir)
   end
end

desc "Builds project."
lane :build do
   sh "cd \"#{ENV['PWD']}/SampleAUHost\" && fastlane build"
   sh "cd \"#{ENV['PWD']}/SampleAUPlugin\" && fastlane build"
end

desc "Builds when under CI (i.e. Travis)."
lane :ci do
   sh "cd \"#{ENV['PWD']}/SampleAUHost\" && fastlane ci"
   sh "cd \"#{ENV['PWD']}/SampleAUPlugin\" && fastlane ci"
end

desc "Cleans project."
lane :clean do
   sh "cd \"#{ENV['PWD']}/SampleAUHost\" && fastlane clean"
   sh "cd \"#{ENV['PWD']}/SampleAUPlugin\" && fastlane clean"
   cleanOutputDir()
end

desc "Build codesigned release for GitHub."
lane :release do
   gym(clean: true, project: "SampleAUHost/AUHost.xcodeproj", scheme: "AUHost", output_directory: AWLOutputDir, derived_data_path: AWLOutputDir)
   gym(clean: true, project: "SampleAUPlugin/Attenuator.xcodeproj", scheme: "Attenuator", output_directory: AWLOutputDir, derived_data_path: AWLOutputDir)
   apps = Dir["#{AWLOutputDir}/*.app"]
   apps.each { |app| zip(path: app, output_path: "#{app}.zip") }
   apps.each { |app| XcodeBuilder.validateBinary(app) }
end

lane :deploy do
   github_release = set_github_release(
     repository_name: "vgorloff/AUHost",
     api_token: ENV['AWL_GITHUB_TOKEN'],
     name: File.read("#{ENV['PWD']}/fastlane/ReleaseName.txt"),
     tag_name: last_git_tag,
     description: File.read("#{ENV['PWD']}/fastlane/ReleaseNotes.txt"),
     commitish: "master",
     upload_assets: ["#{awl_AuHostAppPath}.zip", "#{awl_AttenuatorAppPath}.zip"]
   )
end
