
desc "Build codesigned release for GitHub."
lane :release do
   sh "cd \"#{ENV['PWD']}/SampleAUHost\" && fastlane archive"
   sh "cd \"#{ENV['PWD']}/SampleAUPlugin\" && fastlane archive"
   apps = Dir["#{ENV['PWD']}/**/*.export/*.app"].select { |f| File.directory?(f) }
   apps.each { |app| zip(path: app, output_path: "#{app}.zip") }
   apps.each { |app| XcodeBuilder.validateBinary(app) }
end

desc "Deploy release to GitHub."
lane :deploy do
   assets = Dir["#{ENV['PWD']}/**/*.export/*.app.zip"]
   releaseName = File.read("#{ENV['PWD']}/fastlane/ReleaseName.txt").strip
   releaseDescription = File.read("#{ENV['PWD']}/fastlane/ReleaseNotes.txt").strip
   github_release = set_github_release(
     repository_name: "vgorloff/AUHost", api_token: ENV['AWL_GITHUB_TOKEN'], name: releaseName, tag_name: last_git_tag,
     description: releaseDescription, commitish: "master", upload_assets: assets
   )
end

desc "Verify source code."
lane :verify do
   `swiftlint lint --quiet --path #{ENV['PWD']}`
   puts FileHeaderChecker.new(["AUHost", "WaveLabs"]).analyse("#{ENV['PWD']}/SampleAUHost")
   puts FileHeaderChecker.new(["Attenuator", "WaveLabs"]).analyse("#{ENV['PWD']}/SampleAUPlugin")
end

