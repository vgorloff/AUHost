# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.95.0"
default_platform :mac

platform :mac do

  AWLAuHostProjectRelativeFilePath = "AUHost.xcodeproj"
  AWLAttenuatorProjectRelativeFilePath = "AUSamplePlugIn/Attenuator.xcodeproj"
  
  buildSettingsNoCodesign = {
    "CODE_SIGN_IDENTITY" => "",
    "CODE_SIGNING_REQUIRED" => "NO",
    "CODE_SIGN_ENTITLEMENTS" => ""
  }
  buildSettingsCodesign = {
    "CODE_SIGN_IDENTITY" => "Developer ID Application",
    "CODE_SIGNING_REQUIRED" => "YES"
  }
  xargs = "-configuration Release -project AUSamplePlugIn/Attenuator.xcodeproj"

  desc "Builds project."
  lane :build do
    xcodebuild(scheme: "AttenuatorAU", build_settings: buildSettingsNoCodesign, xcargs: xargs)
  end
  
  desc "Builds when under CI (i.e. Travis)."
  lane :ci do
    xcodebuild(scheme: "AttenuatorAU", build_settings: buildSettingsNoCodesign, xcargs: xargs)
  end
  
  desc "Cleans project."
  lane :clean do
    xcodebuild(scheme: "AttenuatorAU", build_settings: buildSettingsNoCodesign, xcargs: "#{xargs} clean")
  end
  
  desc "Increment version number."
  desc "Usually should be runned after finishing release in Git Flow."
  lane :bump do
    ensure_git_status_clean
    increment_build_number(xcodeproj: "#{AWLAuHostProjectRelativeFilePath}")
    # commit_version_bump(xcodeproj: "#{AWLAuHostProjectRelativeFilePath}")
    increment_build_number(xcodeproj: "#{AWLAttenuatorProjectRelativeFilePath}")
    # commit_version_bump(xcodeproj: "#{AWLAttenuatorProjectRelativeFilePath}")
    awl_versionFromTag = last_git_tag
    increment_version_number(version_number: awl_versionFromTag, xcodeproj: "#{AWLAuHostProjectRelativeFilePath}")
    increment_version_number(version_number: awl_versionFromTag, xcodeproj: "#{AWLAttenuatorProjectRelativeFilePath}")
    git_commit(path: "./", message: "Version Bump")
  end
  
  desc "Build codesigned release foe GitHub."
  lane :release do
    ensure_git_status_clean
    xcodebuild(scheme: "AttenuatorAU", build_settings: buildSettingsCodesign, xcargs: "#{xargs}")
    awl_AuHostAppPath = (sh "xcodebuild -project #{ENV['PWD']}/#{AWLAuHostProjectRelativeFilePath} -showBuildSettings -configuration Release | grep CODESIGNING_FOLDER_PATH | grep -oEi \"\/.*\"").strip
    awl_AttenuatorAppPath = (sh "xcodebuild -project #{ENV['PWD']}/#{AWLAttenuatorProjectRelativeFilePath} -showBuildSettings -configuration Release | grep CODESIGNING_FOLDER_PATH | grep -oEi \"\/.*\"").strip
    zip(path: awl_AuHostAppPath, output_path: "#{awl_AuHostAppPath}.zip")
    zip(path: awl_AttenuatorAppPath, output_path: "#{awl_AttenuatorAppPath}.zip")
    sh "xcrun spctl -a -t exec -vv \"#{awl_AuHostAppPath}\"; xcrun codesign --verify \"#{awl_AuHostAppPath}\""
    sh "xcrun spctl -a -t exec -vv \"#{awl_AttenuatorAppPath}\"; xcrun codesign --verify \"#{awl_AttenuatorAppPath}\""
    sh "mkdir -p #{ENV['PWD']}/build"
    sh "mv \"#{awl_AuHostAppPath}.zip\" \"#{ENV['PWD']}/build\""
    sh "mv \"#{awl_AttenuatorAppPath}.zip\" \"#{ENV['PWD']}/build\""
    # github_release = set_github_release(
    #   repository_name: "fastlane/fastlane",
    #   api_token: ENV['GITHUB_TOKEN'],
    #   name: "Super New actions",
    #   tag_name: last_git_tag,
    #   description: File.read("changelog"),
    #   commitish: "master",
    #   upload_assets: ["#{awl_AuHostAppPath}.zip", "#{awl_AttenuatorAppPath}.zip"]
    # )
  end
  
end
